version: "3.8"

services:
  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks: 
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: 
      - app-network

  # PostgreSQL Service
  postgres:
      image: postgres:15
      container_name: postgres
      environment:
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        POSTGRES_DB: ${DB_NAME}
      ports:
        - "5432:5432"
      volumes:
        - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
        - postgres-data:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - app-network
  # Producer Service
  producer:
    build: .
    container_name: kafka_producer
    command: ["python3.12", "producer.py"]
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
  # Consumer Service
  consumer:
    build: .
    container_name: kafka_consumer
    command: ["python3.12", "consumer.py"]
    volumes:
      - .:/app
    depends_on:
      postgres: 
        condition: service_healthy
      kafka:
        condition: service_healthy
      producer:
        condition: service_started
    restart: on-failure
    networks:
      - app-network
  # Streamlit Service
  streamlit:
    build: .
    container_name: streamlit_app
    command: ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    ports: 
      - "8501:8501"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kafka_db
      DB_USER: kafka_user
      DB_PASSWORD: kafka_password
    volumes:
      - .:/app
    depends_on:
      - fastapi
    networks:
      - app-network 
  
  fastapi:
    build: ./fast_api
    container_name: fastapi_app
    ports:
      - "8000:8000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kafka_db
      DB_USER: kafka_user
      DB_PASSWORD: kafka_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

# Volumes
volumes:
  postgres-data:
networks:
  app-network:
    driver: bridge
